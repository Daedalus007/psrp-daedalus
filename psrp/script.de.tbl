; Space
00= 

; Numbers
01=0
02=1
03=2
04=3
05=4
06=5
07=6
08=7
09=8
0A=9

; Uppercase
0B=A
0C=B
0D=C
0E=D
0F=E
10=F
11=G
12=H
13=I
14=J
15=K
16=L
17=M
18=N
19=O
1A=P
1B=Q
1C=R
1D=S
1E=T
1F=U
20=V
21=W
22=X
23=Y
24=Z

; Lowercase
25=a
26=b
27=c
28=d
29=e
2A=f
2B=g
2C=h
2D=i
2E=j
2F=k
30=l
31=m
32=n
33=o
34=p
35=q
36=r
37=s
38=t
39=u
3A=v
3B=w
3C=x
3D=y
3E=z

; Punctuation
3F=.
40=,
41=-
42=!
43=?
; Apostrophe
44=’
44='
; Double quotes (German style)
45=„
46=“
; non-breaking space
47=_

; Umlauts and ß
48=ä
49=ö
4A=ü
4B=ß

; These map to the un-umlauted letters
0B=Ä
19=Ö
1F=Ü

; Colon in case I miss one somewhere
3F=:

; These control codes only apply to items/names...

; Text between [] is skipped in menus but not in body text
; We encode a "type" as a second byte for each type of brackets. The closing ones are always just $63, the game code doesn't need them to be different.
; The second byte encodes a bitmask for skipping. This allows us to determine whether the chunk is emitted or not by encoding bitmasks in the script.
6201=[
63=]
6202={
63=}
6204=(
63=)

; Articles used in the item tables. Note these have trailing spaces.
64=<Der>
65=<Die> 
66=<Das> 
67=<Ein> 
68=<Eine> 
69=<EinN>

; Placeholders mapping new tokens to "?", handling TODO
43=(
43=)
43={
43=}

; Words go below...
