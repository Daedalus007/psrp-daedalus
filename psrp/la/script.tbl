; Space
00= 

; Numbers
01=0
02=1
03=2
04=3
05=4
06=5
07=6
08=7
09=8
0A=9

; Uppercase
; Uppercase long vowels are dropped
0B=A
0B=Ā
0C=B
0D=C
0E=D
0F=E
0F=Ē
10=F
11=G
12=H
13=Ī
13=I
14=K
15=L
16=M
17=N
; O = 0
01=O
01=Ō
18=P
19=Q
1A=R
1B=S
1C=T
1D=U
1D=Ū
1E=V
1F=X
20=Y
21=Ȳ
22=Z

; Lowercase
23=a
24=ā
25=b
26=c
27=d
28=e
29=ē
2A=f
2B=g
2C=h
2D=i
2E=ī
2F=k
30=l
31=m
32=n
33=o
34=ō
35=p
36=q
37=r
38=s
39=t
3A=u
3B=ū
3C=v
3D=x
3E=y
3F=z

; Punctuation
40=.
41=:
42=‘
43=’
43='
44=,
45=-
46=!
47=?



; These control codes only apply to items/names...

; Text between [] is skipped in menus but not in body text
; We encode a "type" as a second byte for each type of brackets. The closing ones are always just $63, the game code doesn't need them to be different.
; The second byte encodes a bitmask for skipping. This allows us to determine whether the chunk is emitted or not by encoding bitmasks in the script.
; [] = $01 = %00001 = nominative case only
; {} = $02 = %00010 = genitive case only
; () = $04 = %00100 = dative case only
; «» = $08 = %01000 = accusative case only
; ‹› = $10 = %10000 = ablative case only
; Only one of these can be active at a time, controlled by <nom>, <gen>, <acc>, <dat> and <abl> tags in the script.
6201=[
63=]
6202={
63=}
6204=(
63=)
6208=«
63=»
6210=‹
63=›
; Words go below...
